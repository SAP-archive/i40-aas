dist: bionic
language: minimal
git:
  depth: 1

if: (branch = canary OR branch = master ) AND (type = push OR type = pull_request)

env:
  global:
    - REGISTRY=$AZURE_CONTAINER_REGISTRY
    - BUILD_TAG=$(cat .git/refs/heads/${TRAVIS_BRANCH})
  matrix:
    - SVC=adapter-registry
    - SVC=data-manager
    - SVC=endpoint-registry
    - SVC=endpoint-registry-ui
    - SVC=https-endpoint-egress
    - SVC=https-endpoint-ingress
    - SVC=onboarding-skill
    - SVC=storage-adapter-mongodb
    - SVC=grpc-endpoint-ingress
    - SVC=grpc-endpoint-egress
    - SVC=endpoint-resolver
    - SVC=echo-skill

before_install:
  - make --version
  - docker --version
  - docker-compose --version

install:
  - if [ $TRAVIS_BRANCH = master ]; then
    REGISTRY="sapi40";
    echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin;
    else
    openssl aes-256-cbc -K $encrypted_260941c77da3_key -iv $encrypted_260941c77da3_iv -in azure-service-principal.txt.enc -out azure-service-principal.txt -d;
    cat azure-service-principal.txt | docker login $AZURE_CONTAINER_REGISTRY -u $service_principal_id --password-stdin;
    fi
  - if [[ -n $TRAVIS_PULL_REQUEST_BRANCH ]]; then
    BUILD_TAG=$TRAVIS_PULL_REQUEST_BRANCH;
    fi
  - make build-i40-aas-$SVC
  - if [ $TRAVIS_EVENT_TYPE = push ]; then
    make push-i40-aas-$SVC;
    fi

stages:
  - lib-test
  - unit-test
  - integration-test
  - test # use as build stage
  - name: deploy
    if: type = push

jobs:
  include:
    - stage: lib-test
      name: TS AMQP-Client pkg
      language: node_js
      node_js: lts/*
      install:
        - cd src/ts/pkg/AMQP-Client
        - yarn install
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./test/integration-test-setup
        - sleep 30
      script:
        - yarn run test

    - stage: lib-test
      name: Go AMQP-Client pkg
      language: go
      env: GO111MODULE="on"
      install:
        - docker-compose up -d rabbitmq
        - cd src/go/pkg/amqpclient
        - go mod download
      script:
        - go test

    - stage: lib-test
      name: Go interaction pkg
      language: go
      env: GO111MODULE="on"
      install:
        - cd src/go/pkg/interaction
        - go mod download
      script:
        - go test

    - stage: lib-test
      name: Go logging pkg
      language: go
      env: GO111MODULE="on"
      install:
        - cd src/go/pkg/logging
        - go mod download
      script:
        - go test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=onboarding-skill
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/AMQP-Client
        - yarn install
        - yarn run build
        - cd ../../
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./integration-test-setup
        - sleep 30
      script:
        - yarn run test
        - yarn run test-with-integration

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=data-manager
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./test/integration-test-setup
      script:
        - yarn test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=adapter-registry
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./test/integration-test-setup
      script:
        - yarn test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=endpoint-registry
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./integration-test-setup
        - sleep 30
      script:
        - yarn run test
        - yarn run test-with-integration

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=https-endpoint-egress
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/AMQP-Client
        - yarn install
        - yarn run build
        - cd ../../
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./test/integration-test-setup
        - sleep 30
      script:
        - yarn test

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=https-endpoint-ingress
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/AMQP-Client
        - yarn install
        - yarn run build
        - cd ../../
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./test/integration-test-setup
        - sleep 30
      script:
        - yarn run itest

    - stage: unit-test
      language: node_js
      node_js: lts/*
      env: SVC=storage-adapter-mongodb
      install:
        - cd src/ts/cmd/${SVC}
        - yarn install
        - cd ./node_modules/aas-logger
        - yarn install
        - yarn run build
        - cd ../../
        - source ./integration-test-setup
        - sleep 30
      script:
        - yarn run test-with-integration

    - stage: unit-test
      language: go
      env: SVC=grpc-endpoint-ingress GO111MODULE="on"
      install:
        - cd src/go/cmd/${SVC}
        - go mod download
      script:
        - go test

    - stage: unit-test
      language: go
      env: SVC=grpc-endpoint-egress GO111MODULE="on"
      install:
        - cd src/go/cmd/${SVC}
        - go mod download
      script:
        - go test

    - stage: unit-test
      language: go
      env: SVC=endpoint-resolver GO111MODULE="on"
      install:
        - cd src/go/cmd/${SVC}
        - go mod download
        - source ./test-setup
        - sleep 30
      script:
        - go test

    - stage: integration-test
      language: node_js
      node_js: lts/*
      install:
        - yarn global add newman
        - make
        - docker-compose -f docker-compose.yml up -d
        - sleep 60
      script:
        - newman run docs/postman/AAS.postman_collection.json --insecure --delay-request 2000 --folder "Check that mock adapter is empty" --folder "Send Interaction Message to https-endpoint" --folder "Check that mock adapter is populated"
